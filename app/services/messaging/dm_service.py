"""
# ============================================================================ #
# Dosya: dm_service.py
# Yol: /Users/siyahkare/code/telegram-bot/app/services/messaging/dm_service.py
# Ä°ÅŸlev: Direkt mesaj gÃ¶nderimi iÃ§in servis sÄ±nÄ±fÄ±.
#
# Versiyon: v1.0.0
# ============================================================================ #
"""

import logging
import random
import json
import os
import asyncio
import traceback
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Union
from pathlib import Path
from sqlalchemy import text
from sqlalchemy.ext.asyncio import AsyncSession
from telethon import TelegramClient, events
from telethon.errors import FloodWaitError, UserIsBlockedError

from app.services.base_service import BaseService
from app.db.session import get_session
from app.core.config import settings
from app.models.user import User
from app.services.analytics.user_service import UserService

logger = logging.getLogger(__name__)

class DirectMessageService(BaseService):
    """
    DoÄŸrudan mesajlarÄ± yÃ¶neten servis.
    
    Bu servis ÅŸunlarÄ± yapar:
    - Yeni gelen Ã¶zel mesajlarÄ± iÅŸler
    - Otomatik cevaplar gÃ¶nderir
    - Mesaj istatistiklerini toplar
    """
    
    def __init__(self, client: TelegramClient, db=None):
        """DM servisini baÅŸlat."""
        super().__init__(name="dm_service", db=db)
        self.client = client
        self.service_name = "dm_service"
        self.handlers = []
        
        # Son mesaj zamanlarÄ±nÄ± takip iÃ§in
        self.last_dm_times: Dict[int, datetime] = {}
        
        # Åžablonlar
        self.welcome_templates = []
        self.service_templates = []
        self.group_invite_templates = []
        self.service_list = []
        self.group_list = []
        
        # Ä°statistik verileri
        self.sent_count = 0
        self.daily_limit = 200
        self.send_interval = 60  # saniye
        self.last_reset = datetime.now()
        self.templates = {}
        self.active_campaigns = []
        
        # KayÄ±t durumu
        logger.info(f"{self.service_name} servisi baÅŸlatÄ±ldÄ±")
        
    async def run(self):
        """Servis ana dÃ¶ngÃ¼sÃ¼."""
        self.running = True
        logger.info("DM servisi Ã§alÄ±ÅŸÄ±yor...")
        
        # Event handler'larÄ± ayarla
        @self.client.on(events.NewMessage(incoming=True, func=lambda e: e.is_private))
        async def handle_private_message(event):
            """Ã–zel mesajlarÄ± iÅŸle"""
            if not self.running:
                return
                
            try:
                sender = await event.get_sender()
                logger.info(f"Ã–zel mesaj alÄ±ndÄ±: {sender.first_name} (@{sender.username}): {event.text}")
                
                # MesajÄ± yanÄ±tla
                if event.text.lower() in ["selam", "merhaba", "hi", "hello"]:
                    await event.respond(f"Merhaba {sender.first_name}! Size nasÄ±l yardÄ±mcÄ± olabilirim?")
                
            except Exception as e:
                logger.error(f"Ã–zel mesaj iÅŸlenirken hata: {e}")
        
        # Handler'Ä± listeye ekle
        self.handlers.append(handle_private_message)
        
        try:
            # Servis Ã§alÄ±ÅŸÄ±rken aktif kal
            while self.running:
                await asyncio.sleep(10)  # DÃ¼zenli kontrol
                
        except asyncio.CancelledError:
            logger.info("DM servisi iptal edildi")
            self.running = False
        except Exception as e:
            logger.error(f"DM servisi Ã§alÄ±ÅŸÄ±rken hata: {e}")
            self.running = False
    
    async def stop(self):
        """Servisi durdur."""
        if not self.running:
            return
            
        self.running = False
        
        # Event handler'larÄ± temizle
        for handler in self.handlers:
            self.client.remove_event_handler(handler)
        
        self.handlers = []
        
        # Ãœst sÄ±nÄ±f stop metodunu Ã§aÄŸÄ±r
        await super().stop()
        
        logger.info("DM servisi durduruldu")
    
    async def initialize(self):
        """Servisi baÅŸlat ve ÅŸablonlarÄ± yÃ¼kle."""
        self.db = self.db or next(get_session())
        self.user_service = UserService(db=self.db)
        await self._load_templates()
        await self._load_service_list()
        await self._load_group_list()
        logger.info(f"DirectMessageService initialized with {len(self.welcome_templates)} welcome templates")
        
        # Event handler'larÄ± kaydet
        self.client.add_event_handler(
            self.handle_new_private_message,
            events.NewMessage(incoming=True, func=lambda e: e.is_private)
        )
        
        self.initialized = True
        return True
    
    async def _load_templates(self):
        """Mesaj ÅŸablonlarÄ±nÄ± yÃ¼kle."""
        try:
            # Ã–nce veritabanÄ± ÅŸemasÄ±nÄ± kontrol et
            schema_query = """
                SELECT table_name
                FROM information_schema.tables
                WHERE table_schema = 'public'
            """
            schema_result = self.db.execute(text(schema_query))
            tables = [row[0] for row in schema_result.fetchall()]
            
            if 'message_templates' not in tables:
                logger.warning("Message templates table not found, using default templates")
                # VarsayÄ±lan ÅŸablonlar ekle
                self.welcome_templates = [(1, "Merhaba, Telegram botumuza hoÅŸ geldiniz! ðŸ‘‹")]
                self.service_templates = [(1, "Hizmetlerimiz hakkÄ±nda bilgi almak ister misiniz?")]
                self.group_invite_templates = [(1, "GruplarÄ±mÄ±za katÄ±larak destek olabilirsiniz.")]
            else:
                # KarÅŸÄ±lama ÅŸablonlarÄ±
                query = """
                    SELECT id, content FROM message_templates 
                    WHERE is_active = true AND type = 'dm_welcome'
                """
                result = self.db.execute(text(query))
                self.welcome_templates = result.fetchall()
                
                # Hizmet tanÄ±tÄ±m ÅŸablonlarÄ±
                query = """
                    SELECT id, content FROM message_templates 
                    WHERE is_active = true AND type = 'dm_service'
                """
                result = self.db.execute(text(query))
                self.service_templates = result.fetchall()
                
                # Grup davet ÅŸablonlarÄ±
                query = """
                    SELECT id, content FROM message_templates 
                    WHERE is_active = true AND type = 'dm_invite'
                """
                result = self.db.execute(text(query))
                self.group_invite_templates = result.fetchall()
            
            # Templates sÃ¶zlÃ¼ÄŸÃ¼nÃ¼ gÃ¼ncelle
            self.templates = {
                "welcome": self.welcome_templates,
                "service": self.service_templates,
                "invite": self.group_invite_templates
            }
            
            logger.info(f"Loaded templates: welcome={len(self.welcome_templates)}, " + 
                        f"service={len(self.service_templates)}, invite={len(self.group_invite_templates)}")
        except Exception as e:
            logger.error(f"Error loading templates: {str(e)}")
            # En azÄ±ndan varsayÄ±lan ÅŸablonlar ekle
            self.welcome_templates = [(1, "Merhaba, Telegram botumuza hoÅŸ geldiniz! ðŸ‘‹")]
            self.service_templates = [(1, "Hizmetlerimiz hakkÄ±nda bilgi almak ister misiniz?")]
            self.group_invite_templates = [(1, "GruplarÄ±mÄ±za katÄ±larak destek olabilirsiniz.")]
            self.templates = {
                "welcome": self.welcome_templates,
                "service": self.service_templates,
                "invite": self.group_invite_templates
            }
    
    async def _load_service_list(self):
        """Sunulan hizmetleri yÃ¼kle."""
        try:
            # Ã–nce veritabanÄ± ÅŸemasÄ±nÄ± kontrol et
            schema_query = """
                SELECT table_name
                FROM information_schema.tables
                WHERE table_schema = 'public'
            """
            schema_result = self.db.execute(text(schema_query))
            tables = [row[0] for row in schema_result.fetchall()]
            
            if 'services' in tables:
                query = """
                    SELECT id, name, description, price, is_active 
                    FROM services 
                    WHERE is_active = true
                    ORDER BY id DESC
                """
                result = self.db.execute(text(query))
                self.service_list = result.fetchall()
                logger.info(f"Loaded {len(self.service_list)} active services")
            else:
                logger.warning("Services table not found in database")
                self.service_list = []
        except Exception as e:
            logger.error(f"Error loading service list: {str(e)}")
            self.service_list = []
    
    async def _load_group_list(self):
        """Davet edilecek gruplarÄ±mÄ±zÄ± yÃ¼kle."""
        try:
            # Ã–nce veritabanÄ± ÅŸemasÄ±nÄ± kontrol et
            schema_query = """
                SELECT column_name
                FROM information_schema.columns
                WHERE table_name = 'groups'
            """
            schema_result = self.db.execute(text(schema_query))
            columns = [row[0] for row in schema_result.fetchall()]
            
            if not columns:
                logger.warning("Groups table has no columns or doesn't exist")
                self.group_list = []
                return
                
            # Her sÃ¼tun iÃ§in kontrol et ve dinamik sorgu oluÅŸtur
            # "title" sÃ¼tunu yoksa "name" veya "group_name" sÃ¼tununu kullan
            name_column = "title"
            if "title" not in columns:
                if "name" in columns:
                    name_column = "name"
                elif "group_name" in columns:
                    name_column = "group_name"
            
            # chat_id yerine alternatif sÃ¼tun isimleri kontrol et
            chat_id_column = None
            for possible_column in ["chat_id", "group_id", "telegram_id", "tg_id"]:
                if possible_column in columns:
                    chat_id_column = possible_column
                    break
            
            # Gerekli sÃ¼tunlar mevcut deÄŸilse
            if not chat_id_column:
                logger.warning("Chat ID column not found in groups table")
                # Sadece mevcut olan sÃ¼tunlarla Ã§alÄ±ÅŸalÄ±m
                query = f"""
                    SELECT id, {name_column} AS title 
                    FROM groups 
                    WHERE is_active = true
                    ORDER BY id DESC
                """
            else:
                # DiÄŸer sÃ¼tunlarÄ± da kontrol et
                invite_column = "invite_link" if "invite_link" in columns else "NULL as invite_link"
                desc_column = "description" if "description" in columns else "NULL as description"
                member_column = "member_count" if "member_count" in columns else "0 as member_count"
                admin_check = "AND is_admin = true" if "is_admin" in columns else ""
                
                query = f"""
                    SELECT id, {name_column} AS title, {chat_id_column} as chat_id, 
                           {invite_column}, {desc_column}, {member_column}
                    FROM groups 
                    WHERE is_active = true {admin_check}
                    ORDER BY id DESC
                """
            
            # Sorguyu Ã§alÄ±ÅŸtÄ±r ve sonuÃ§larÄ± kaydet
            self.db.rollback()  # Ã–nceki hatadan kalan iÅŸlemi temizle
            result = self.db.execute(text(query))
            self.group_list = result.fetchall()
            logger.info(f"Loaded {len(self.group_list)} groups for invites")
        except Exception as e:
            logger.error(f"Error loading group list: {str(e)}")
            # Ã–nceki hatalÄ± iÅŸlemi geri al ve devam et
            try:
                self.db.rollback()
            except:
                pass
            self.group_list = []
    
    async def handle_new_private_message(self, event):
        """KullanÄ±cÄ±lardan gelen Ã¶zel mesajlarÄ± iÅŸle."""
        try:
            message = event.message
            sender = await message.get_sender()
            user_id = sender.id
            
            logger.info(f"Received DM from user {user_id}")
            
            # KullanÄ±cÄ±yÄ± veritabanÄ±nda kaydet/gÃ¼ncelle
            await self.user_service.register_or_update_user(sender)
            
            # KullanÄ±cÄ± bilgilerini getir
            user = await self.user_service.get_user(user_id)
            
            # EÄŸer yeni kullanÄ±cÄ±ysa veya ilk mesajÄ±ysa karÅŸÄ±lama mesajÄ± gÃ¶nder
            if not user or user.get("messages_received", 0) <= 1:
                await self._send_welcome_message(user_id)
            
            # Hizmet listesi istenirse
            message_text = message.text.lower() if message.text else ""
            if "hizmet" in message_text or "fiyat" in message_text or "Ã¼cret" in message_text:
                await self._send_service_list(user_id)
            elif "grup" in message_text or "kanal" in message_text or "davet" in message_text:
                await self._send_group_invites(user_id)
            else:
                # DiÄŸer durumlarda genel bir yanÄ±t ver
                await self._send_auto_dm_reply(user_id)
                
        except Exception as e:
            logger.error(f"Error handling private message: {str(e)}", exc_info=True)
    
    async def _send_welcome_message(self, user_id: int):
        """Yeni kullanÄ±cÄ±ya karÅŸÄ±lama mesajÄ± gÃ¶nder."""
        try:
            if not self.welcome_templates:
                logger.warning("No welcome templates found")
                await self.client.send_message(user_id, "Merhaba, Telegram botumuza hoÅŸ geldiniz! ðŸ‘‹")
                return
                
            # Rastgele bir hoÅŸgeldin mesajÄ± seÃ§
            template = random.choice(self.welcome_templates)
            message_text = template.content if hasattr(template, 'content') else template[1]
            
            # MesajÄ± gÃ¶nder
            await self.client.send_message(user_id, message_text)
            logger.info(f"Sent welcome message to user {user_id}")
            
            # KullanÄ±cÄ± istatistiklerini gÃ¼ncelle
            if self.user_service:
                await self.user_service.update_user_stat(user_id, "welcome_message_sent", 1)
                    
        except Exception as e:
            logger.error(f"Error sending welcome message: {str(e)}", exc_info=True)
            # Hata durumunda standart bir karÅŸÄ±lama gÃ¶ndermeyi dene
            try:
                await self.client.send_message(user_id, "Merhaba, Telegram botumuza hoÅŸ geldiniz! ðŸ‘‹")
            except:
                pass
    
    async def _send_service_list(self, user_id: int):
        """KullanÄ±cÄ±ya hizmet listesini gÃ¶nder."""
        try:
            if not self.service_list:
                await self.client.send_message(user_id, "Åžu an iÃ§in aktif bir hizmet bulunmamaktadÄ±r.")
                return
                
            message_text = "ðŸ“‹ **Hizmet Listesi**\n\n"
            valid_services_count = 0
            
            for service in self.service_list:
                try:
                    # Service objesi veya tuple/list olabilir
                    if hasattr(service, '__dict__'):  # SQLAlchemy nesnesiyse
                        name = getattr(service, 'name', '')
                        description = getattr(service, 'description', '')
                        price = getattr(service, 'price', 0)
                        is_active = getattr(service, 'is_active', True)
                    else:  # Tuple ise
                        # En az 2 sÃ¼tun olmalÄ± (id ve name)
                        if len(service) < 2:
                            continue
                            
                        name = service[1]
                        description = service[2] if len(service) > 2 else ""
                        price = service[3] if len(service) > 3 else 0
                        is_active = service[4] if len(service) > 4 else True
                    
                    # Sadece aktif hizmetleri gÃ¶ster
                    if not is_active:
                        continue
                    
                    # MesajÄ± oluÅŸtur
                    message_text += f"**{name}**\n"
                    if description:
                        message_text += f"{description}\n"
                    message_text += f"Fiyat: {price} TL\n\n"
                    valid_services_count += 1
                    
                except Exception as e:
                    logger.warning(f"Error formatting service: {e}")
                    continue
            
            # HiÃ§ geÃ§erli hizmet yoksa
            if valid_services_count == 0:
                await self.client.send_message(user_id, "Åžu an iÃ§in aktif bir hizmet bulunmamaktadÄ±r.")
                return
                
            message_text += "\nDetaylÄ± bilgi iÃ§in lÃ¼tfen iletiÅŸime geÃ§in."
            
            # Mesaj Ã§ok uzunsa bÃ¶lmek gerekebilir
            if len(message_text) > 4000:
                chunks = [message_text[i:i+4000] for i in range(0, len(message_text), 4000)]
                for chunk in chunks:
                    await self.client.send_message(user_id, chunk)
                    await asyncio.sleep(0.5)  # Mesajlar arasÄ±nda kÄ±sa bekle
            else:
                await self.client.send_message(user_id, message_text)
                
            logger.info(f"Sent service list to user {user_id}")
            
            # KullanÄ±cÄ± istatistiklerini gÃ¼ncelle
            if self.user_service:
                try:
                    await self.user_service.update_user_stat(user_id, "service_list_viewed", 1)
                except Exception as e:
                    logger.warning(f"Could not update user stats: {e}")
            
        except Exception as e:
            logger.error(f"Error sending service list: {str(e)}", exc_info=True)
            # Hata durumunda basit bir mesaj gÃ¶nder
            try:
                await self.client.send_message(user_id, "Hizmet listesi ÅŸu anda yÃ¼klenemiyor. LÃ¼tfen daha sonra tekrar deneyiniz.")
            except:
                pass
    
    async def _send_group_invites(self, user_id: int):
        """KullanÄ±cÄ±ya grup davetlerini gÃ¶nder."""
        try:
            if not self.group_list:
                await self.client.send_message(user_id, "Åžu an iÃ§in aktif bir grup daveti bulunmamaktadÄ±r.")
                return
                
            # Davet ÅŸablonu seÃ§
            template = random.choice(self.group_invite_templates) if self.group_invite_templates else None
            
            # Ana mesaj metni
            message_text = "ðŸŒŸ **Telegram GruplarÄ±mÄ±z**\n\n"
            
            # EÄŸer bir ÅŸablon varsa onu ekle
            if template:
                template_text = template.content if hasattr(template, 'content') else template[1]
                message_text += f"{template_text}\n\n"
            
            # En fazla 5 grup gÃ¶ster (Telegram mesaj limitleri iÃ§in)
            group_count = min(5, len(self.group_list))
            valid_groups_count = 0
            
            for group in self.group_list[:group_count]:
                # Group objesi veya tuple/list olabilir
                try:
                    # DeÄŸerleri almaya Ã§alÄ±ÅŸ (farklÄ± sÃ¼tun yapÄ±larÄ± dikkate alÄ±narak)
                    if hasattr(group, '__dict__'):  # SQLAlchemy nesnesiyse
                        title = getattr(group, 'title', '')
                        invite_link = getattr(group, 'invite_link', None)
                        description = getattr(group, 'description', '')
                        member_count = getattr(group, 'member_count', 0)
                    else:  # Tuple ise
                        # En az 2 sÃ¼tun olmalÄ± (id ve title)
                        if len(group) < 2:
                            continue
                            
                        title = group[1]  # title zaten seÃ§ilmiÅŸ
                        
                        # DiÄŸer sÃ¼tunlar yapÄ±ya gÃ¶re opsiyonel
                        invite_link = group[3] if len(group) > 3 else None
                        description = group[4] if len(group) > 4 else ""
                        member_count = group[5] if len(group) > 5 else 0
                
                    # Sadece davet linki olan gruplarÄ± gÃ¶ster
                    if not invite_link:
                        continue
                    
                    # MesajÄ± oluÅŸtur
                    message_text += f"**{title}**\n"
                    if description:
                        message_text += f"{description}\n"
                    if member_count:
                        message_text += f"Ãœye SayÄ±sÄ±: {member_count}\n"
                    message_text += f"KatÄ±lmak iÃ§in: {invite_link}\n\n"
                    valid_groups_count += 1
                    
                except Exception as e:
                    logger.warning(f"Error formatting group invitation: {e}")
                    continue
            
            # HiÃ§ geÃ§erli grup yoksa
            if valid_groups_count == 0:
                await self.client.send_message(user_id, "Åžu an iÃ§in aktif bir grup daveti bulunmamaktadÄ±r.")
                return
                
            # Sonda bilgilendirme
            message_text += "TÃ¼m gruplarÄ±mÄ±z iÃ§in web sitemizi ziyaret edebilirsiniz."
            
            await self.client.send_message(user_id, message_text)
            logger.info(f"Sent group invites to user {user_id}")
            
            # KullanÄ±cÄ± istatistiklerini gÃ¼ncelle
            if self.user_service:
                try:
                    await self.user_service.update_user_stat(user_id, "invites_sent", 1)
                except Exception as e:
                    logger.warning(f"Could not update user stats: {e}")
            
        except Exception as e:
            logger.error(f"Error sending group invites: {str(e)}", exc_info=True)
            # Hata durumunda basit bir mesaj gÃ¶nder
            try:
                await self.client.send_message(user_id, "Grup davetleri ÅŸu anda yÃ¼klenemiyor. LÃ¼tfen daha sonra tekrar deneyiniz.")
            except:
                pass
    
    async def _send_auto_dm_reply(self, user_id: int):
        """
        DM'ye gelen mesajlara otomatik yanÄ±t gÃ¶nderir (data/dm_auto_reply.json'dan).
        """
        try:
            import json
            import random
            with open('data/dm_auto_reply.json', 'r', encoding='utf-8') as f:
                replies = json.load(f)
            reply_list = replies.get('dm_auto_reply', [])
            if not reply_list:
                await self.client.send_message(user_id, "Åžu anda otomatik yanÄ±t verilemiyor.")
                return
            yanit = random.choice(reply_list)
            await self.client.send_message(user_id, yanit)
            logger.info(f"DM'ye otomatik yanÄ±t gÃ¶nderildi: {user_id}")
        except Exception as e:
            logger.error(f"DM otomatik yanÄ±t hatasÄ±: {str(e)}")
            await self.client.send_message(user_id, "YanÄ±t gÃ¶nderilirken bir hata oluÅŸtu.")
    
    async def _send_response(self, user_id: int, message_text: str):
        """
        KullanÄ±cÄ±nÄ±n mesajÄ±na Ã¶zel yanÄ±t gÃ¶nderir. (Otomatik DM reply de dahil)
        """
        await self._send_auto_dm_reply(user_id)
    
    async def send_promotional_dm(self, user_id: int, promo_type: str = "service"):
        """KullanÄ±cÄ±ya tanÄ±tÄ±m mesajÄ± gÃ¶nder."""
        try:
            # Son mesaj gÃ¶nderim zamanÄ±nÄ± kontrol et
            last_sent = self.last_dm_times.get(user_id, datetime.now() - timedelta(days=1))
            time_since_last = (datetime.now() - last_sent).total_seconds() / 60  # dakika
            
            if time_since_last < 60:  # Son 1 saat iÃ§inde mesaj gÃ¶nderdiysen atla
                logger.debug(f"Skipping promotional DM to user {user_id} (sent {time_since_last:.2f} minutes ago)")
                return False
            
            # TanÄ±tÄ±m tÃ¼rÃ¼ne gÃ¶re ÅŸablon seÃ§
            templates = self.templates.get(promo_type, [])
            if not templates:
                logger.warning(f"No templates found for promo_type: {promo_type}")
                return False
            
            template = random.choice(templates)
            message_text = template.content if hasattr(template, 'content') else template[1]
            
            # MesajÄ± gÃ¶nder
            await self.client.send_message(user_id, message_text)
            
            # Son gÃ¶nderim zamanÄ±nÄ± gÃ¼ncelle
            self.last_dm_times[user_id] = datetime.now()
            self.sent_count += 1
            
            logger.info(f"Sent promotional DM ({promo_type}) to user {user_id}")
            return True
            
        except UserIsBlockedError:
            logger.warning(f"User {user_id} has blocked the bot")
            return False
            
        except FloodWaitError as e:
            wait_time = e.seconds
            logger.warning(f"FloodWaitError: Need to wait {wait_time} seconds")
            return False
            
        except Exception as e:
            logger.error(f"Error sending promotional DM: {str(e)}", exc_info=True)
            return False
    
    async def start_promo_loop(self):
        """TanÄ±tÄ±m mesajÄ± dÃ¶ngÃ¼sÃ¼."""
        logger.info("Starting promotional DM loop")
        self.running = True
        
        while self.running:
            try:
                # GÃ¼nlÃ¼k limiti sÄ±fÄ±rla (eÄŸer gÃ¼n deÄŸiÅŸtiyse)
                now = datetime.now()
                if now.day != self.last_reset.day:
                    self.sent_count = 0
                    self.last_reset = now
                
                # GÃ¼nlÃ¼k limite ulaÅŸÄ±ldÄ±ysa bekle
                if self.sent_count >= self.daily_limit:
                    logger.info(f"Daily DM limit reached ({self.sent_count}/{self.daily_limit}). Waiting until next day.")
                    await asyncio.sleep(3600)  # 1 saat bekle
                    continue
                
                # Hedef kullanÄ±cÄ±larÄ± al
                query = """
                    SELECT user_id, first_name, last_name, username
                    FROM users
                    WHERE is_active = true 
                      AND is_blocked = false
                      AND last_dm_sent < NOW() - INTERVAL '24 hours'
                    ORDER BY last_activity_at DESC
                    LIMIT 20
                """
                result = self.db.execute(text(query))
                users = result.fetchall()
                
                if not users:
                    logger.info("No users found for DM promo, waiting 30 minutes")
                    await asyncio.sleep(1800)
                    continue
                
                # Her kullanÄ±cÄ±ya tanÄ±tÄ±m mesajÄ± gÃ¶nder
                for user in users:
                    if not self.running or self.sent_count >= self.daily_limit:
                        break
                        
                    user_id = user.user_id if hasattr(user, 'user_id') else user[0]
                    
                    # TanÄ±tÄ±m mesajÄ±nÄ± gÃ¶nder
                    success = await self.send_promotional_dm(user_id)
                    
                    if success:
                        # VeritabanÄ±nÄ± gÃ¼ncelle
                        query = """
                            UPDATE users 
                            SET last_dm_sent = NOW() 
                            WHERE user_id = :user_id
                        """
                        self.db.execute(text(query), {"user_id": user_id})
                        self.db.commit()
                    
                    # FloodWait'ten kaÃ§Ä±nmak iÃ§in bekle
                    await asyncio.sleep(self.send_interval)
                
                # Ä°ÅŸlemler arasÄ±nda ara ver
                await asyncio.sleep(300)  # 5 dakika
                
            except Exception as e:
                logger.error(f"Error in promo DM loop: {str(e)}", exc_info=True)
                await asyncio.sleep(600)  # Hata durumunda 10 dakika bekle
    
    async def cleanup(self):
        """Servis kapatÄ±lÄ±rken temizlik."""
        if hasattr(self, 'client') and self.client:
            self.client.remove_event_handler(self.handle_new_private_message)
        logger.info("DirectMessageService cleanup completed")
    
    async def get_status(self) -> Dict[str, Any]:
        """
        Servis durumunu dÃ¶ndÃ¼rÃ¼r.
        
        Returns:
            Dict[str, Any]: Durum bilgileri
        """
        return {
            "name": "DirectMessageService",
            "running": self.running,
            "initialized": self.initialized,
            "daily_limit": self.daily_limit,
            "sent_today": self.sent_count,
            "welcome_templates": len(self.welcome_templates),
            "service_templates": len(self.service_templates),
            "group_templates": len(self.group_invite_templates),
            "service_list_count": len(self.service_list),
            "group_list_count": len(self.group_list),
            "last_reset": self.last_reset.isoformat()
        }

    async def _start(self) -> bool:
        """BaseService iÃ§in baÅŸlatma metodu"""
        return await self.initialize()
        
    async def _stop(self) -> bool:
        """BaseService iÃ§in durdurma metodu"""
        try:
            self.running = False
            await self.cleanup()
            return True
        except Exception as e:
            logger.error(f"Error stopping DirectMessageService: {str(e)}", exc_info=True)
            return False

    async def _update(self) -> bool:
        """Periyodik gÃ¼ncelleme metodu"""
        # ÅžablonlarÄ± yeniden yÃ¼kle 
        await self._load_templates()
        await self._load_service_list()
        await self._load_group_list()
        return True
