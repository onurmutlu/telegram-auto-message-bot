version: '3.8'

services:
  # PostgreSQL veritabanı
  db:
    image: postgres:14-alpine
    container_name: telegram_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-telegram_bot}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-telegram_bot}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - telegram_network

  # Alembic Migrations
  alembic:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    image: telegram-bot:latest
    container_name: telegram_alembic
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-telegram_bot}
    volumes:
      - ./app:/app/app
      - ./alembic.ini:/app/alembic.ini
    command: ["alembic", "upgrade", "head"]
    networks:
      - telegram_network

  # Telegram Bot API (FastAPI uygulama)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    image: telegram-bot:latest
    container_name: telegram_app
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      alembic:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
    volumes:
      - ./sessions:/app/sessions
      - ./logs:/app/logs
    command: ["python", "-m", "app.api.main"]
    ports:
      - "${API_PORT:-8000}:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - telegram_network
    
  # Scheduler - Zamanlanmış görevler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    image: telegram-bot:latest
    container_name: telegram_scheduler
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      app:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
    volumes:
      - ./sessions:/app/sessions
      - ./logs:/app/logs
    command: ["python", "-m", "app.scheduler"]
    networks:
      - telegram_network

  # Telegram Client 
  client:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    image: telegram-bot:latest
    container_name: telegram_client
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      app:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - SESSION_NAME=${SESSION_NAME:-telegram_session}
      - DB_HOST=db
      - DB_PORT=5432
    volumes:
      - ./sessions:/app/sessions
      - ./logs:/app/logs
    command: ["python", "-m", "app.client"]
    networks:
      - telegram_network

  # Web Panel (Next.js)
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    image: telegram-web:latest
    container_name: telegram_web
    restart: unless-stopped
    depends_on:
      app:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - NEXT_PUBLIC_API_URL=http://app:8000
    ports:
      - "${WEB_PORT:-3000}:3000"
    networks:
      - telegram_network

volumes:
  postgres_data:
    name: telegram_postgres_data

networks:
  telegram_network:
    name: telegram_network
    driver: bridge