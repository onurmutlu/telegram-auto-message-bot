version: '3'

services:
  postgres:
    image: postgres:13
    container_name: telegram-bot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: botuser
      POSTGRES_PASSWORD: botpass
      POSTGRES_DB: botdb
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U botuser"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6
    container_name: telegram-bot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  telegram-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: telegram-bot
    volumes:
      - ./app:/app/app
      - ./runtime:/app/runtime
      - ./data:/app/data
      - ./logs:/app/logs
      - ./session:/app/session
    env_file:
      - .env
    environment:
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - TZ=Europe/Istanbul
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - bot-network

  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: telegram-bot-api
    container_name: telegram-bot-api
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./runtime:/app/runtime
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - bot-network
    command: ["./start.sh"]

volumes:
  postgres_data:
  redis_data:

networks:
  bot-network:
    driver: bridge