version: '3.8'

services:
  # PostgreSQL veritabanı
  db:
    image: postgres:14-alpine
    container_name: telegram_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-botuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-botpass}
      POSTGRES_DB: ${DB_NAME:-botdb}
    volumes:
      - ./runtime/database:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-botuser} -d ${DB_NAME:-botdb}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - telegram_network

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: telegram_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./runtime/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - telegram_network

  # Telegram Bot uygulaması
  bot:
    build:
      context: .
      dockerfile: Dockerfile.debug
    image: telegram-bot:latest
    container_name: telegram_bot
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env.docker
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./app:/app/app
      - ./runtime:/app/runtime
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - telegram_network

networks:
  telegram_network:
    name: telegram_network
    driver: bridge 