"""
Loglama yapƒ±landƒ±rmalarƒ± i√ßin yardƒ±mcƒ± mod√ºl
"""
import os
import sys
import logging
from logging.handlers import RotatingFileHandler
from pathlib import Path
import json
from typing import Dict, Any, Optional
from colorama import init, Fore, Style, Back
from datetime import datetime

init(autoreset=True)  # Colorama'yƒ± ba≈ülat

class ExtraAdapter(logging.LoggerAdapter):
    """Ekstra veri ile log yapmak i√ßin adapter"""
    def process(self, msg, kwargs):
        extra = kwargs.get("extra", {})
        if extra:
            kwargs["extra"] = self.extra
            for key, value in extra.items():
                kwargs["extra"][key] = value
        return msg, kwargs

class JSONFormatter(logging.Formatter):
    """JSON formatƒ±nda log yapƒ±landƒ±rmasƒ±"""
    def format(self, record):
        log_data = {
            'timestamp': self.formatTime(record, self.datefmt),
            'name': record.name,
            'level': record.levelname,
            'message': record.getMessage(),
            'path': record.pathname,
            'line': record.lineno,
            'function': record.funcName
        }
        
        # Varsa ekstra veriyi ekle
        if hasattr(record, 'extra_data'):
            log_data['extra'] = record.extra_data
            
        # Varsa hata bilgisini ekle
        if record.exc_info:
            log_data['exception'] = self.formatException(record.exc_info)
            
        return json.dumps(log_data)

class ColoredFormatter(logging.Formatter):
    """Renklendirilmi≈ü konsol log formatƒ±"""
    COLORS = {
        'DEBUG': '\033[94m',  # Mavi
        'INFO': '\033[92m',   # Ye≈üil
        'WARNING': '\033[93m',# Sarƒ±
        'ERROR': '\033[91m',  # Kƒ±rmƒ±zƒ±
        'CRITICAL': '\033[41m\033[97m', # Beyaz √ºzerine kƒ±rmƒ±zƒ± arkaplan
    }
    RESET = '\033[0m'
    
    def format(self, record):
        log_message = super().format(record)
        if record.levelname in self.COLORS:
            log_message = f"{self.COLORS[record.levelname]}{log_message}{self.RESET}"
        return log_message

class LoggerSetup:
    """Logger yapƒ±landƒ±rma yardƒ±mcƒ±sƒ±"""
    
    @staticmethod
    def setup_logger(logs_path: Path, detailed_logs_path: Optional[Path] = None, level=logging.INFO) -> logging.Logger:
        """
        Logger yapƒ±landƒ±rmasƒ±nƒ± ayarlar
        Args:
            logs_path: Log dosyasƒ± yolu
            detailed_logs_path: Detaylƒ± log dosyasƒ± yolu (opsiyonel)
            level: Log seviyesi
        Returns:
            logging.Logger: Yapƒ±landƒ±rƒ±lmƒ±≈ü logger nesnesi
        """
        # Logs dizinini olu≈ütur (dosyanƒ±n deƒüil, dizinin)
        logs_dir = logs_path.parent
        logs_dir.mkdir(parents=True, exist_ok=True)
        
        # Root logger ayarlarƒ±
        root_logger = logging.getLogger()
        root_logger.setLevel(level)
        
        # Eski handler'larƒ± temizle
        for handler in root_logger.handlers[:]:
            root_logger.removeHandler(handler)
        
        # Dosya handler'ƒ± ekle
        # RotatingFileHandler kullanarak dosyanƒ±n √ºzerine yazƒ±lmasƒ±nƒ± saƒüla
        file_handler = RotatingFileHandler(
            filename=logs_path,
            maxBytes=10*1024*1024,  # 10MB
            backupCount=5,
            encoding='utf-8',
            mode='a'  # 'w' yerine 'a' (append) kullan
        )
        file_handler.setFormatter(logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            '%Y-%m-%d %H:%M:%S'
        ))
        root_logger.addHandler(file_handler)
        
        # Detaylƒ± JSON dosya handler'ƒ± (opsiyonel)
        if detailed_logs_path:
            detailed_logs_dir = detailed_logs_path.parent
            detailed_logs_dir.mkdir(parents=True, exist_ok=True)
            
            json_handler = RotatingFileHandler(
                filename=detailed_logs_path, 
                maxBytes=10*1024*1024,  # 10MB
                backupCount=5,
                encoding='utf-8',
                mode='a'
            )
            json_handler.setFormatter(JSONFormatter())
            root_logger.addHandler(json_handler)
        
        # Konsol handler'ƒ± ekle
        console_handler = logging.StreamHandler(sys.stderr)
        console_handler.setFormatter(ColoredFormatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            '%Y-%m-%d %H:%M:%S'
        ))
        root_logger.addHandler(console_handler)
        
        logger = logging.getLogger('telegram_bot')
        logger.info("Logger ba≈üarƒ±yla yapƒ±landƒ±rƒ±ldƒ±: %s", logs_path)
        
        return logger

    @staticmethod
    def get_terminal_format():
        """Terminal formatƒ± i√ßin renkli √ßƒ±ktƒ± ≈üablonlarƒ±nƒ± d√∂nd√ºr√ºr"""
        return {
            'tur_baslangic': f"\n{Fore.CYAN}{{}} | üîÑ Yeni tur ba≈ülƒ±yor...{Style.RESET_ALL}",
            'grup_sayisi': f"{Fore.YELLOW}üìä Aktif Grup: {{}} | ‚ö†Ô∏è Devre Dƒ±≈üƒ±: {{}}{Style.RESET_ALL}",
            'mesaj_durumu': f"{Fore.GREEN}‚úâÔ∏è  Turda: {{}} | üìà Toplam: {{}}{Style.RESET_ALL}",
            'bekleme': f"{Fore.BLUE}‚è≥ {{}}:{{:02d}}{Style.RESET_ALL}",
            'hata_grubu': f"{Fore.RED}‚ö†Ô∏è  {{}}: {{}}{Style.RESET_ALL}",
            'basari': f"{Fore.GREEN}‚úÖ {{}}{Style.RESET_ALL}",
            'uyari': f"{Fore.YELLOW}‚ö†Ô∏è {{}}{Style.RESET_ALL}",
            'hata': f"{Fore.RED}‚ùå {{}}{Style.RESET_ALL}",
            'bilgi': f"{Fore.CYAN}‚ÑπÔ∏è {{}}{Style.RESET_ALL}",
            'group_message': f"{Fore.MAGENTA}üì® Gruba Mesaj: {{}}{Style.RESET_ALL}",
            'user_invite': f"{Fore.YELLOW}üë§ Kullanƒ±cƒ± Daveti: {{}}{Style.RESET_ALL}",
            'user_activity': f"{Fore.CYAN}üëÅÔ∏è Kullanƒ±cƒ± Aktivitesi: {{}}{Style.RESET_ALL}"
        }

    @staticmethod
    def log_extra(logger, level, message, **extra):
        """
        Ekstra verilerle birlikte log kaydƒ± olu≈üturur
        
        Args:
            logger: Logger nesnesi
            level: Log seviyesi ('debug', 'info', 'warning', 'error', 'critical')
            message: Log mesajƒ±
            **extra: Ekstra veri alanlarƒ±
        """
        record = logging.LogRecord(
            name=logger.name,
            level=getattr(logging, level.upper()),
            pathname='',
            lineno=0,
            msg=message,
            args=(),
            exc_info=None
        )
        record.extra_data = extra
        for handler in logger.handlers:
            handler.emit(record)

    @staticmethod
    def get_logger_with_extras(logger_name: str, **extra) -> logging.LoggerAdapter:
        """
        Extra verilerle zenginle≈ütirilmi≈ü logger olu≈üturur
        
        Args:
            logger_name: Logger adƒ±
            **extra: Eklenecek extra veriler
            
        Returns:
            LoggerAdapter: Extra verilerle zenginle≈ütirilmi≈ü logger
        """
        logger = logging.getLogger(logger_name)
        return ExtraAdapter(logger, extra)