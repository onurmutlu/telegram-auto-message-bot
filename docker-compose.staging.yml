version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.staging
    image: telegram-bot:staging
    container_name: telegram-bot-staging
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://botuser:botpass@postgres:5432/botdb
      - REDIS_URL=redis://redis:6379/0
      - TELEGRAM_API_ID=${TELEGRAM_API_ID}
      - TELEGRAM_API_HASH=${TELEGRAM_API_HASH}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - SESSION_NAME=telegram_session
      - LOG_LEVEL=INFO
      - ENV=staging
    volumes:
      - ./runtime:/app/runtime
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    command: >
      sh -c "python -m app.main"

  postgres:
    image: postgres:14-alpine
    container_name: telegram-bot-postgres-staging
    restart: unless-stopped
    environment:
      - POSTGRES_USER=botuser
      - POSTGRES_PASSWORD=botpass
      - POSTGRES_DB=botdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U botuser -d botdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: telegram-bot-redis-staging
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data: 